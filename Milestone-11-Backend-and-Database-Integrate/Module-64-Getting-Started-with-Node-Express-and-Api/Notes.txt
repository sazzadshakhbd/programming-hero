Module 64 

সাবধান !!! সাবধান !!! সাবধান !!! ডেভেলপার হতে গেলে-- হার্ডওয়ার্ক/প্রাকটিস এর কোন বিকল্প নাই। শর্টকাট বলতে কিছু নাই। 

শর্টকার্ট/চালাকি এর একটাই পরিণতি-- ধরা খাওয়া। সো, ভিডিও দেখে গেছি কিন্তু প্রাকটিস ঠিক মতো করে করি নাই বা এসাইনমেন্ট এর আগের দিন এর কন্সেপচুয়াল সেশন দেখে এসাইনমেন্ট করতে আসছি । সেই দিন শেষ। সেই বুদ্ধি করতে গেলে--এসাইনমেন্ট ১০ এ যেমন ধরা খাইছো। সামনে আরো খাবে। 

 

তাই ফিউচারে ধরা খাইতে না চাইলে-- 'বোকার মতো প্রাকটিস করে যাও'। মডিউলের কাজ মডিউলে শেষ করার চেষ্টা করো। সিরিয়াসলি সময় দাও। প্রাকটিস করো। প্রাকটিস ডে গুলো কাজে লাগাও। দরকার হলে কন্সেপচুয়াল সেশনে জয়েন করো। যে প্রাকটিস টাস্ক দেয়া হয়। সেটা করো। কোন অবস্থাতেই এসাইনমেন্ট এর আগের কয়েকদিন এর জন্য প্রাকটিস ঝমিয়ে রেখো না। চরম ধরা খাবে। আগে শর্টকাটে পার পাইলেও এখন আর পারবে না। কারণ ধীরে ধীরে এরর খাওয়ার মাত্রা বাড়বে। সো, সময় থাকতে প্রাকটিসের পরিমাণ বাড়াও। না হলে টেনেটুনে এসাইনমেন্টও করতে পারবে না প্লাস SCIC বা তার পরবর্তী লেভেলেও যেতে পারবে না। সো, সময় থাকতে সাবধান !!!

.

আর এখন একটু হার্ডওয়ার্ক করতে হবে। আর মাত্র ১ মাসই তো। এই সময়টাতে তোমার লাইফের সেরা হার্ডওয়ার্কটা করো। তোমার এবিলিটি কি সেটা ভুলে যাও। তুমি কে। কি করতে পারো। সব ভুলে যাও। লাইফে যা করো নাই।সেটাই এই নেক্সট এক মাস নিজের ২০০% এফোর্ট দিতে পারলে তোমার নিজের লাইফ নিজে পাল্টায় ফেলতে পারবে। জাস্ট একটা মাস ই তো। 

 

-----------------------------------------

.

শুরু হচ্ছে ব্যাকএন্ড প্লাস ডাটাবেজ ইন্টিগ্রেট মাইলস্টোন। YAY। মডিউল ৬৪

#module_release #backend_database #module_64

আর ১ মাস সময় দিলেই আমাদের মেইন কোর্স শেষ। কি মজা ! এই মাইলস্টোন এর উদ্দেশ্য হচ্ছে সার্ভার সাইড, ডাটাবেজ সম্পর্কে ধারণা নেয়া। তোমার React ওয়েবসাইট এর সাথে সার্ভার, ডাটাবেজ কানেক্ট করা। তাই এই মাইলস্টোন এ আমরা node, express, mongodb শিখবো এবং সেগুলাকে সিম্পল একটা React এপ্লিকেশন এর সাথে কানেক্ট করবো। তাহলে আমরা ছোটখাটো হলেও একটি কমপ্লিট ওয়েব সাইট বানানোর কায়দা এর দিকে এগুতে পারবো।  

. 

আজকের মডিউল এ জাস্ট 9 টা ভিডিও। একদম প্রথম দিকে আছে Node সম্পর্কে কিছুটা ধারণা। নোড কি জিনিস? নোড এর সাথে javascript এর কি পার্থক্য? এই জিনিসগুলো প্রায়ই ইন্টারিভিউতে জিজ্ঞেস করে। এর পর আসবে সিম্পল একটা নোড প্রজেক্ট কিভাবে শুরু করবে। সেখানে কিভাবে express ইনস্টল করবে। কিভাবে তোমার প্রথম API তৈরি করবে। এরপর আসবে nodemon নামের একটা জিনিস। এই জিনিস যদি কাজ না করে মাথা গরম করার দরকার নাই। এইটা ছাড়া জাস্ট node index.js কমান্ড দিয়ে চালাতো থাকো। এরপর তুমি বেশ কয়েকটা API তৈরি করে ফেলবে। 

 

কিছু API তৈরি করার পর, ডাইনামিক API এবং এর মধ্যে parameter কিভাবে পাঠাবে সেই প্যারামিটার কিভাবে সার্ভার সাইড থেকে একসেস করতে পারবে। যদি কখনো APIi এর মধ্যে query string থাকে সেটা কিভাবে একসেস করবে। সেটা নিয়ে আলোচনা। এরপর আসবে সার্ভার থেকে ডাটা কিভাবে নিয়ে আসবে সেই ডাটা কিভাবে ওয়েবসাইটে দেখাবে। সেটা করতে গেলে cors নামক একটা ইস্যু হয়। এই cors জিনিসটা কি একটু গুগল করে জেনে নিও। 

 

.

 

এইভাবে কয়েকটা get রিকুয়েস্ট এর api বানাবে। এরপর ডাইনামিক ডাটা লোড করার বিষয় দেখবে। আর সবার শেষে এ কিভাবে ওয়েবসাইট থেকে ডাটা সার্ভারে পাঠানো হয়। সেই ডাটা কিভাবে একসেস করা যায়। সেই রিলেটেড মজার জিনিস দেখবে। 

 

.

 

এখন থেকে যতই মজার আর ফান জিনিস দেখবে ততই খেয়াল করে করে প্রাকটিস করতে হবে। 

 



.

মাইলস্টোন ১১ এর টেনটেটিভ আউটলাইন

অক্টোবর ২৮: মডিউল ৬৪: NodeJS, MongoDB, Database Integration

অক্টোবর ২৯: মডিউল ৬৫:  Mongodb CRUD and Operators

অক্টোবর ৩০: মডিউল ৬৬: Genius Car UI and Load Services

অক্টোবর ৩১: মডিউল ৬৬.৫: CRUD Update and Product Management Practice(প্র্যাক্টিস ডে)

অক্টোবর ৩১: রাত ৯.০০: কন্সেপচুয়াল সেশন =>



নভেম্বর ০১ : মডিউল ৬৭ : Genius Car Node Mongo CRUD Recap

নভেম্বর ০২ : মডিউল ৬৮ : Pagination and Load Data by filter

নভেম্বর ০৩ : মডিউল ৬৯ : Introduction to JWT and (advanced) Secure API using JWT

নভেম্বর ০৪ : মডিউল ৬৯.৫ : Deploy to Vercel and Practice Problem(প্র্যাক্টিস ডে)

নভেম্বর ০৪: রাত ৯.০০: কন্সেপচুয়াল সেশন =>

নভেম্বর ০৫ : মডিউল ৭০: Practice Problem 

নভেম্বর ০৬: নো মডিউল : এক্সট্রা প্র্যাক্টিস ডে



নভেম্বর ০৭ : মডিউল ৭১ : এসাইনমেন্ট ১১ (৬০ মার্কসের ১ম দিন)

নভেম্বর ০৮ : এসাইনমেন্ট ১১ (৬০ মার্কসের ২য় দিন)

নভেম্বর ০৯: এসাইনমেন্ট ১১ (৬০ মার্কসের ৩য় এবং শেষ দিন ১০ তারিখ রাত ১১.৫৯ পর্যন্ত)

নভেম্বর ১০ : মডিউল ৭১.৫ : (Conceptual) JWT token and Pagination(৫০ মার্কসের শেষ দিন ১১ তারিখ রাত ১১.৫৯ পর্যন্ত)

নভেম্বর ১১ : মডিউল ৭২ : মাইলস্টোন ১২ Final Project (Complete Website)